// GENERATED CODE - DO NOT MODIFY MANUALLY
// **************************************************************************
// Auto generated by https://github.com/fluttercandies/ff_annotation_route
// **************************************************************************

import 'package:flutter/material.dart';
import 'package:pcrgvg_flutter/model/models.dart';
import 'package:pcrgvg_flutter/providers/home_provider.dart';
import 'package:ff_annotation_route_library/ff_annotation_route_library.dart';
import 'package:flutter/widgets.dart';
import 'pages/about_page.dart';
import 'pages/collection_page.dart';
import 'pages/home/home_filter_page.dart';
import 'pages/home/home_page.dart';
import 'pages/link_detail_page.dart';
import 'pages/main_page.dart';
import 'pages/manage_chara_page.dart';
import 'pages/mine_page.dart';
import 'pages/result_detail_page.dart';
import 'pages/result_page.dart';
import 'pages/setting_page.dart';
import 'pages/spalsh_page.dart';
import 'pages/task_detail_page.dart';

// ignore_for_file: prefer_const_literals_to_create_immutables,unused_local_variable,unused_import
FFRouteSettings getRouteSettings({
  required String name,
  Map<String, dynamic>? arguments,
}) {
  final Map<String, dynamic> safeArguments =
      arguments ?? const <String, dynamic>{};
  switch (name) {
    case 'aboutPage':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        widget: AboutPage(
          key: asT<Key?>(safeArguments['key']),
        ),
        routeName: 'aboutPage',
      );
    case 'collectionPage':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        widget: CollectionPage(
          key: asT<Key?>(safeArguments['key']),
        ),
        routeName: 'collectionPage',
      );
    case 'homeFilterPage':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        widget: HomeFilterPage(
          key: asT<Key?>(safeArguments['key']),
          homeProvider: asT<HomeProvider>(safeArguments['homeProvider'])!,
        ),
        routeName: 'homeFilterPage',
      );
    case 'homePage':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        widget: HomePage(
          key: asT<Key?>(safeArguments['key']),
        ),
        routeName: 'homePage',
      );
    case 'linkDetailPage':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        widget: LinkDetailPage(
          key: asT<Key?>(safeArguments['key']),
          link: asT<Link>(safeArguments['link'])!,
          bgUrl: asT<String?>(safeArguments['bgUrl']),
        ),
        routeName: 'linkDetailPage',
      );
    case 'mainPage':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        widget: MainPage(
          key: asT<Key?>(safeArguments['key']),
        ),
        routeName: 'mainPage',
      );
    case 'manageCharaPage':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        widget: ManageCharaPage(),
        routeName: 'manageCharaPage',
      );
    case 'minePage':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        widget: MinePage(
          key: asT<Key?>(safeArguments['key']),
        ),
        routeName: 'minePage',
      );
    case 'resultDetailPage':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        widget: ResultDetailPage(
          key: asT<Key?>(safeArguments['key']),
          taskResult: asT<List<TaskFilterResult>>(safeArguments['taskResult'])!,
        ),
        routeName: 'resultDetailPage',
      );
    case 'resultPage':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        widget: ResultPage(
          bossList: asT<List<ResultBoss>>(safeArguments['bossList'])!,
        ),
        routeName: 'resultPage',
      );
    case 'settingPage':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        widget: SettingPage(
          key: asT<Key?>(safeArguments['key']),
        ),
        routeName: 'settingPage',
      );
    case 'spalshPage':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        widget: SpalshPage(
          key: asT<Key?>(safeArguments['key']),
        ),
        routeName: 'spalshPage',
      );
    case 'taskDetailPage':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        widget: TaskDetailPage(
          key: asT<Key?>(safeArguments['key']),
          bossPrefab: asT<int>(safeArguments['bossPrefab'])!,
          task: asT<Task>(safeArguments['task'])!,
        ),
        routeName: 'taskDetailPage',
      );
    default:
      return const FFRouteSettings(name: '404', routeName: '404_page');
  }
}
